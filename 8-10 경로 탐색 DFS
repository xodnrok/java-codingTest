그래프와 인접행렬에 대해 공부 했을때 양방향,단방향인 경우 2차원 배열을 만들고 이때 인덱스의 값을 사용하기 때문에 인덱스 1부터 시작한다. 그리고 2개의 숫자를 받고 arr[i][j] = 1 이렇게 표시하면 연결 된 것이다.
하지만 가중치가 있을경우는 3개의 숫자를 받기 때문에 arr[i][j] = v 1대신 가중치 값을 넣어준다.


문제

방향그래프가 주어지면 1번 정점에서 N번 정점으로 가는 모든 경로의 가지 수를 출력하는 프로그램을 작성하세요. 아래 그래프에서 1번 정점에서 5번 정점으로 가는 가지 수는
1 2 3 4 5
1 2 5
1 3 4 2 5
1 3 4 5
1 4 2 5
1 4 5

총 6가지입니다.

입력설명
첫째 줄에는 정점의 수 N(1<=N<=20)와 간선의 수 M가 주어진다. 그 다음부터 M줄에 걸쳐 연결정보가 주어진다.

출력설명
5 9
1 2
1 3
1 4
2 1
2 3
2 5
3 4
4 2
4 5

출력예제 1
6

내가 푼 정답(맞추긴 했지만 정답과는 살짝 다르다.)

import java.util.*;

class Main {

    static int[][] arr;
    static int[] arrDfs;
    static int n;
    static int count;

    public static void main(String[] args) {

        Scanner input = new Scanner(System.in);

        n = input.nextInt();
        int m = input.nextInt();

        arr = new int[n + 1][n + 1];
        arrDfs = new int[n + 1];

        for (int i = 0; i < m; i++) {
            int i1 = input.nextInt();
            int i2 = input.nextInt();

            arr[i1][i2] = 1;
        }

        DFS(1);

        System.out.println(count);
    }

    private static void DFS(int i) {


        if (i == n) {
            count++;
        } else {
            arrDfs[i] = 1;
            for (int j = 1; j <=n; j++) {
                if (arr[i][j] != 0 && arrDfs[j] == 0) {
                    DFS(j);
                    arrDfs[i] = 0;
                }
            }
        }


    }

}

인프런 정답


import java.util.*;

class Main {

    static int[][] arr;
    static int[] arrDfs;
    static int n;
    static int count;

    public static void main(String[] args) {

        Scanner input = new Scanner(System.in);

        n = input.nextInt();
        int m = input.nextInt();

        arr = new int[n + 1][n + 1];
        arrDfs = new int[n + 1];

        for (int i = 0; i < m; i++) {
            int i1 = input.nextInt();
            int i2 = input.nextInt();

            arr[i1][i2] = 1;
        }

        arrDfs[1] = 1;
        DFS(1);

        System.out.println(count);
    }

    private static void DFS(int i) {


        if (i == n) {
            count++;
        } else {
            for (int j = 1; j <=n; j++) {
                if (arr[i][j] != 0 && arrDfs[j] == 0) {
                    arrDfs[j] = 1;
                    DFS(j);
                    arrDfs[j] = 0;
                }
            }
        }


    }

}





