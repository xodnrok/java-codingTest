문제

방향그래프가 주어지면 1번 정점에서 N번 정점으로 가는 모든 경로의 가지 수를 출력하는 프로그램을 작성하세요. 아래 그래프에서 1번 정점에서 5번 정점으로 가는 가지 수는
1 2 3 4 5
1 2 5
1 3 4 2 5
1 3 4 5
1 4 2 5
1 4 5

총 6가지입니다.

입력설명
첫째 줄에는 정점의 수 N(1<=N<=20)와 간선의 수 M가 주어진다. 그 다음부터 M줄에 걸쳐 연결정보가 주어진다.

출력설명
5 9
1 2
1 3
1 4
2 1
2 3
2 5
3 4
4 2
4 5

출력예제 1
6

내가푼 풀이 방식(인프런은 DFS 구현 할때 iter 방식을 써서 코드를 더 간결화 시켰다.)

import java.util.*;

class Main {

    static int n,m, answer = 0;
    static List<List<Integer>> graph;
    static int[] ch;


    public static void main(String[] args) {

        Scanner input = new Scanner(System.in);

        n = input.nextInt();
        m = input.nextInt();
        graph = new ArrayList<>();

        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<Integer>());
        }

        ch = new int[n + 1];

        for (int i = 0; i < m; i++) {
            int a = input.nextInt();
            int b = input.nextInt();

            graph.get(a).add(b);
        }

        ch[1] = 1;
        DFS(1);
        System.out.println(answer);

    }

    private static void DFS(int i) {
        if (i == n) {
            answer++;
        } else {
            for (int j = 0; j < graph.get(i).size(); j++) {
                if (ch[graph.get(i).get(j)] == 0) {
                    ch[graph.get(i).get(j)] = 1;
                    DFS(graph.get(i).get(j));
                    ch[graph.get(i).get(j)] = 0;
                }
            }
        }
    }

}

인프런 풀이 방식

import java.util.*;

class Main {

    static int n,m, answer = 0;
    static List<List<Integer>> graph;
    static int[] ch;


    public static void main(String[] args) {

        Scanner input = new Scanner(System.in);

        n = input.nextInt();
        m = input.nextInt();
        graph = new ArrayList<>();

        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<Integer>());
        }

        ch = new int[n + 1];

        for (int i = 0; i < m; i++) {
            int a = input.nextInt();
            int b = input.nextInt();

            graph.get(a).add(b);
        }

        ch[1] = 1;
        DFS(1);
        System.out.println(answer);

    }

    private static void DFS(int i) {
        if (i == n) {
            answer++;
        } else {
            for (int nv : graph.get(i)) {
                if (ch[nv] == 0) {
                    ch[nv] = 1;
                    DFS(nv);
                    ch[nv] = 0;
                }
            }
        }
    }

}
