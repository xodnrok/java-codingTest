설명

N개의 원소로 구성된 자연수 집합이 주어지면, 이 집합을 두 개의 부분집합으로 나누었을 때

두 부분집합의 원소의 합이 서로 같은 경우가 존재하면 “YES"를 출력하고, 그렇지 않으면 ”NO"를 출력하는 프로그램을 작성하세요.

둘로 나뉘는 두 부분집합은 서로소 집합이며, 두 부분집합을 합하면 입력으로 주어진 원래의 집합이 되어 합니다.

예를 들어 {1, 3, 5, 6, 7, 10}이 입력되면 {1, 3, 5, 7} = {6, 10} 으로 두 부분집합의 합이 16으로 같은 경우가 존재하는 것을 알 수 있다.


입력

첫 번째 줄에 자연수 N(1<=N<=10)이 주어집니다.

두 번째 줄에 집합의 원소 N개가 주어진다. 각 원소는 중복되지 않는다.


출력

첫 번째 줄에 “YES" 또는 ”NO"를 출력한다.


예시 입력 1                                     예시 출력 1

6                                               YES
1 3 5 6 7 10


import java.util.*;

class Main {

    static int n, total = 0;
    static int[] arr;
    static boolean flag = false;
    static String answer = "NO";


    public static void main(String[] args) {

        Scanner input = new Scanner(System.in);
        n = input.nextInt();

        arr = new int[n];

        for (int i = 0; i < n; i++) {
            arr[i] = input.nextInt();
            total += arr[i];
        }

        DFS(0, 0); //레벨과 계속 더하는 sum값을 넘긴다.

        System.out.println(answer);
    }

    private static void DFS(int L, int sum) {

        if (flag) { //스택에 잠들어 있는 다음 코드들을 바로 종료 시키기 위해서
            return;
        }

        if (sum > total / 2) {
            return; //절반 값은 넘어 갈 경우 더는 탐문 할 필요가 없기 때문에
        }

        if (L == n) {
            if (total- sum == sum) {// 서로 같을려면 절반 값을 뺏을때 같아야 한다.
                flag = true;
                answer = "YES"; // 값이 NO인 경우도 있을 수 있기 때문에
            }

        } else {
            DFS(L + 1, sum + arr[L]);
            DFS(L+1,sum);
        }

    }

}



